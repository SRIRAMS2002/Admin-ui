{"version":3,"file":"459.1dafc47ed6da35cb.js","mappings":"mRAcIA,MAAA,YAC0BA,MAAA,GAAaA,8BADlBA,MAAA,UAAAA,MAAA,EAAAC,EAAA,YAAAC,EAAAC,YAAA,UAAAD,EAAAC,cACKH,cAAAE,EAAAE,mCAiBVJ,MAAA,eAA8DA,MAAA,GAAkBA,kCAAvCA,MAAA,QAAAK,EAAAC,IAAqBN,cAAAK,EAAAE,OAmC5E,MAAOC,EAMTC,YACYC,EACAC,GADAC,KAAAF,KACAE,KAAAD,SANZC,KAAAC,SAAgD,GAChDD,KAAAR,QAAyB,KACzBQ,KAAAT,YAA0C,KAMtCS,KAAKE,eAAiBF,KAAKF,GAAGK,MAAM,CAChCC,WAAY,CAAC,IACbC,UAAW,CAAC,KAEpB,CAEAC,WACIN,KAAKO,eACT,CAEAA,gBACI,MAAMC,EAAeC;;;;;;;;;UAWrBT,KAAKD,OAAOW,WAAyE,CAAEC,MAAOH,IACzFI,aAAaC,UAAUC,IACpBd,KAAKC,SAAWa,EAAOC,KAAKd,SAASe,MAAMC,OAAOC,GAA0B,MAAfA,EAAQxB,GAAU,EAE3F,CAEAyB,WACI,MAAQf,aAAYC,aAAcL,KAAKE,eAAekB,MAEhDC,EAA8BZ;;;;UAMpCT,KAAKD,OAAOuB,OAAO,CACfC,SAAUF,EACVG,UAAW,CACPpB,aACAqB,WAAY,CAACpB,MAElBQ,UACCa,IACI1B,KAAK2B,YAAY,0DAA2D,UAAS,EAEzFC,IACI5B,KAAK2B,YAAY,8DAA+D,SAChFE,QAAQD,MAAM,uCAAwCA,EAAK,EAGvE,CAEAD,YAAYnC,EAAiBsC,GACzB9B,KAAKR,QAAUA,EACfQ,KAAKT,YAAcuC,EACnBC,WAAW,KACP/B,KAAKR,QAAU,KACfQ,KAAKT,YAAc,MACpB,IACP,iDAvESK,GAAeR,MAAA4C,MAAA5C,MAAA6C,MAAA,oCAAfrC,EAAesC,UAAA,yBAAAC,YAAA,EAAAC,SAAA,CAAAhD,OAAAiD,MAAA,GAAAC,KAAA,EAAAC,OAAA,szCAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IAvDvBrD,MADL,mBACKA,CADW,SACsBA,MAAA,0BAAoBA,MAAA,OAAIA,MAAA,2BAAoBA,QAAIA,MAAA,UAAIA,MAAA,OAAGA,MAAA,iCAA2BA,QAAIA,MAAA,QAAEA,QAE1HA,MAAA,EAAAuD,EAAA,aAGAvD,MAAA,aAAmCA,MAAA,6BAAYsD,EAAAvB,UAAU,GAK7C/B,MAFT,WAESA,CAF6D,WAE7DA,CADyC,cAC+DA,MAAA,mBAAYA,QACpHA,MAAA,cAEJA,QAGIA,MADJ,WACIA,CADyC,cAC8DA,MAAA,eAAQA,QAG3GA,MAFJ,cAEIA,CADyF,eACtDA,MAAA,yBAAkBA,QACrDA,MAAA,GAAAwD,EAAA,iBAGZxD,YAGIA,MADJ,YACIA,CADoE,gBAEhEA,MAAA,eAIhBA,qBA7BUA,MAAA,GAAAA,MAAA,OAAAsD,EAAAlD,SAGAJ,cAAA,YAAAsD,EAAAxC,gBAesCd,MAAA,IAAAA,MAAA,UAAAsD,EAAAzC,0BAiClC4C,MAAYC,MAAAC,eAAAf,kDAAAgB,aAAAC,OAAA,8WC9D1B,MAAAC,EAAe,IACXC,OAAuB,CACnBC,UAAWxD,EACXyD,KAAM,GACNC,MAAO,8CACPC,WAAY","names":["i0","_c0","ctx_r0","messageType","message","channel_r2","id","code","AssignComponent","constructor","fb","apollo","this","channels","assignmentForm","group","customerId","channelId","ngOnInit","fetchChannels","GET_CHANNELS","gql","watchQuery","query","valueChanges","subscribe","result","data","items","filter","channel","onSubmit","value","ASSIGN_CUSTOMER_TO_CHANNELS","mutate","mutation","variables","channelIds","response","showMessage","error","console","type","setTimeout","i1","i2","selectors","standalone","features","decls","vars","consts","template","rf","ctx","AssignComponent_div_9_Template","AssignComponent_option_22_Template","SharedModule","i3","i4","i5","styles","routes","registerRouteComponent","component","path","title","breadcrumb"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/extensions/manual-customer-channel-ui/components/assignCustomer.component.ts","./src/extensions/manual-customer-channel-ui/routes.ts"],"sourcesContent":["//assignCustomer.component.ts\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { SharedModule } from '@vendure/admin-ui/core';\nimport { Apollo } from 'apollo-angular';\nimport gql from 'graphql-tag';\n\n@Component({\n    selector: 'channel-assignment',\n    template: `\n<vdr-page-block>\n     <p style=\" margin-bottom: 1rem;\">Check twice that the<b> Entered Customer ID </b>and <b>Selected Channel is correct</b>. </p>\n    \n    <div *ngIf=\"message\" [ngClass]=\"{'success': messageType === 'success', 'error': messageType === 'error'}\" \n         class=\"notification\">{{ message }}</div>\n\n    <form [formGroup]=\"assignmentForm\" (ngSubmit)=\"onSubmit()\" \n          style=\"grid-template-columns: 1fr 1fr; gap: 2rem; max-width: 600px; margin: 2rem auto; padding: 2rem; border: 1px solid #ddd; border-radius: 8px; background-color: #dcdcdc;\">\n       \n       <div style=\"display: flex; justify-content: space-evenly; gap: 1rem;\">\n            <div style=\"flex-grow: 1; min-width: 200px;\">\n                <label for=\"customerId\" style=\"display: block; color: black; font-weight: bold; margin-bottom: 0.5rem;\">Customer ID:</label>\n                <input id=\"customerId\" formControlName=\"customerId\" placeholder=\"Enter the ID\" required \n                       style=\"width: 80%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;\" />\n            </div>\n\n            <div style=\"flex-grow: 1; min-width: 200px;\">\n                <label for=\"channelId\" style=\"display: block; color: black; font-weight: bold; margin-bottom: 0.5rem;\">Channel:</label>\n                <select id=\"channelId\" formControlName=\"channelId\" required \n                        style=\"width: 100%; padding: 0.5rem; border: 1px solid #5A67D8; border-radius: 4px;\">\n                    <option value=\"\" disabled selected>Select the Channel</option>\n                    <option *ngFor=\"let channel of channels\" [value]=\"channel.id\">{{ channel.code }}</option>\n                </select>\n            </div>\n        </div>\n\n        <div style=\"grid-column: span 2; text-align: center; margin-top: 1rem;\">\n            <button type=\"submit\" style=\"background-color: #5A67D8; color: white; padding: 0.75rem 2rem; border: none; border-radius: 4px; cursor: pointer; font-size: 1rem; font-weight: bold; transition: background-color 0.3s;\">\n                Update\n            </button>\n        </div>\n    </form>\n</vdr-page-block>\n    `,\n    styles: [`\n        .notification {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 1rem;\n            border-radius: 4px;\n            color: white;\n            font-weight: bold;\n            z-index: 1000;\n            transition: opacity 0.5s ease-in-out;\n        }\n        .success {\n            background-color: #4CAF50;\n        }\n        .error {\n            background-color: #f44336;\n        }\n    `],\n    standalone: true,\n    imports: [SharedModule],\n})\nexport class AssignComponent implements OnInit {\n    assignmentForm: FormGroup;\n    channels: Array<{ id: string, code: string }> = [];\n    message: string | null = null;\n    messageType: 'success' | 'error' | null = null;\n\n    constructor(\n        private fb: FormBuilder,\n        private apollo: Apollo\n    ) {\n        this.assignmentForm = this.fb.group({\n            customerId: [''],\n            channelId: [''],\n        });\n    }\n\n    ngOnInit() {\n        this.fetchChannels();\n    }\n\n    fetchChannels() {\n        const GET_CHANNELS = gql`\n            query GetChannels {\n                channels {\n                    items {\n                        id\n                        code\n                    }\n                }\n            }\n        `;\n\n        this.apollo.watchQuery<{ channels: { items: Array<{ id: string; code: string }> } }>({ query: GET_CHANNELS })\n            .valueChanges.subscribe(result => {\n                this.channels = result.data.channels.items.filter(channel => channel.id !== '1');\n            });\n    }\n\n    onSubmit() {\n        const { customerId, channelId } = this.assignmentForm.value;\n\n        const ASSIGN_CUSTOMER_TO_CHANNELS = gql`\n            mutation AssignCustomerToChannels($customerId: ID!, $channelIds: [ID!]!) {\n                assignCustomerToChannels(customerId: $customerId, channelIds: $channelIds)\n            }\n        `;\n\n        this.apollo.mutate({\n            mutation: ASSIGN_CUSTOMER_TO_CHANNELS,\n            variables: {\n                customerId,\n                channelIds: [channelId],\n            },\n        }).subscribe(\n            response => {\n                this.showMessage('Customer has been successfully assigned to the channel.', 'success');\n            },\n            error => {\n                this.showMessage('Failed to assign customer to the channel. Please try again.', 'error');\n                console.error('Error assigning customer to channel:', error);\n            }\n        );\n    }\n\n    showMessage(message: string, type: 'success' | 'error') {\n        this.message = message;\n        this.messageType = type;\n        setTimeout(() => {\n            this.message = null;\n            this.messageType = null;\n        }, 5000); // Hide after 5 seconds\n    }\n}\n","import { registerRouteComponent } from '@vendure/admin-ui/core';\r\nimport { AssignComponent } from './components/assignCustomer.component';\r\n\r\nexport default [\r\n    registerRouteComponent({\r\n        component: AssignComponent,\r\n        path: '',\r\n        title: 'Switch Customer from one to another Channel',\r\n        breadcrumb: 'Switch Channel',\r\n    }),\r\n];\r\n"],"x_google_ignoreList":[]}