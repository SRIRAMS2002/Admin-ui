{"version":3,"file":"643.70957e675e918daa.js","mappings":"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","names":["_c0","a0","a1","HealthCheckComponent_div_6_ng_container_4_Template","rf","ctx","i0","HealthCheckComponent_div_6_ng_template_5_Template","HealthCheckComponent_div_6_Template","status_r1","ngIf","error_r2","ctx_r2","healthCheckService","lastCheck$","HealthCheckComponent_tr_28_ng_container_5_Template","HealthCheckComponent_tr_28_ng_template_6_Template","HealthCheckComponent_tr_28_Template","row_r4","$implicit","down_r5","key","result","status","message","JobStateLabelComponent_span_4_Template","ctx_r0","job","progress","_c1","JobListComponent_ng_template_40_ng_container_0_Template","JobListComponent_ng_template_40_ng_template_1_Template","item_r1","item","name","JobListComponent_ng_template_40_Template","others_r2","JobListComponent_ng_template_48_Template","job_r3","id","JobListComponent_ng_template_51_Template","job_r4","createdAt","JobListComponent_ng_template_54_Template","job_r5","queueName","JobListComponent_ng_template_57_vdr_dropdown_0_Template","job_r6","data","JobListComponent_ng_template_57_Template","JobListComponent_ng_template_60_div_1_Template","job_r7","attempts","JobListComponent_ng_template_60_div_2_Template","retries","JobListComponent_ng_template_60_Template","state","JobListComponent_ng_template_63_Template","job_r8","duration","JobListComponent_ng_template_66_vdr_dropdown_0_Template","job_r9","JobListComponent_ng_template_66_vdr_dropdown_1_Template","error","JobListComponent_ng_template_66_vdr_dropdown_2_Template","_r10","ctx_r10","cancelJob","JobListComponent_ng_template_66_Template","hasResult","isSettled","HealthCheckComponent","constructor","this","ɵfac","t","i1","ɵcmp","type","selectors","decls","vars","consts","template","refresh","status$","details$","dependencies","i3","i3$1","i4","styles","changeDetection","JobStateLabelComponent","iconShape","JobState","COMPLETED","FAILED","CANCELLED","PENDING","RETRYING","RUNNING","colorType","inputs","JobListComponent","BaseListComponent","dataService","router","route","super","liveUpdate","FormControl","queueFilter","stateFilter","setQueryFn","args","settings","getAllJobs","jobs","skip","take","value","eq","options","filter","sort","SortOrder","DESC","ngOnInit","timer","pipe","takeUntil","destroy$","subscribe","queues$","getJobQueues","mapStream","res","jobQueues","map","queues","running","Object","keys","length","i2","features","$event","setPageNumber","setItemsPerPage","items$","itemsPerPage$","totalItems$","currentPage$","i5","i6","systemRoutes","path","component","breadcrumb","marker","SystemModule","ɵmod","ɵinj","imports","SharedModule","RouterModule","forChild"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/@vendure/admin-ui/fesm2022/vendure-admin-ui-system.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i1 from '@vendure/admin-ui/core';\nimport { JobState, BaseListComponent, SortOrder, SharedModule } from '@vendure/admin-ui/core';\nimport * as i3 from '@clr/angular';\nimport * as i3$1 from '@angular/common';\nimport * as i4 from '@ngx-translate/core';\nimport * as i5 from '@angular/forms';\nimport { FormControl } from '@angular/forms';\nimport { timer } from 'rxjs';\nimport { takeUntil, filter, map } from 'rxjs/operators';\nimport * as i2 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i6 from '@ng-select/ng-select';\nimport { marker } from '@biesbjerg/ngx-translate-extract-marker';\n\nclass HealthCheckComponent {\n    constructor(healthCheckService) {\n        this.healthCheckService = healthCheckService;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: HealthCheckComponent, deps: [{ token: i1.HealthCheckService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: HealthCheckComponent, selector: \"vdr-health-check\", ngImport: i0, template: \"<vdr-page-header>\\r\\n    <vdr-page-title></vdr-page-title>\\r\\n</vdr-page-header>\\r\\n<vdr-page-body>\\r\\n    <vdr-page-block>\\r\\n        <vdr-action-bar>\\r\\n            <vdr-ab-left>\\r\\n                <div class=\\\"system-status-header\\\" *ngIf=\\\"healthCheckService.status$ | async as status\\\">\\r\\n                    <div class=\\\"status-icon\\\">\\r\\n                        <clr-icon\\r\\n                            [attr.shape]=\\\"status === 'ok' ? 'check-circle' : 'exclamation-circle'\\\"\\r\\n                            [ngClass]=\\\"{ 'is-success': status === 'ok', 'is-danger': status !== 'ok' }\\\"\\r\\n                            size=\\\"48\\\"\\r\\n                        ></clr-icon>\\r\\n                    </div>\\r\\n                    <div class=\\\"status-detail\\\">\\r\\n                        <ng-container *ngIf=\\\"status === 'ok'; else error\\\">\\r\\n                            {{ 'system.health-all-systems-up' | translate }}\\r\\n                        </ng-container>\\r\\n                        <ng-template #error>\\r\\n                            {{ 'system.health-error' | translate }}\\r\\n                        </ng-template>\\r\\n                        <div class=\\\"last-checked\\\">\\r\\n                            {{ 'system.health-last-checked' | translate }}:\\r\\n                            {{ healthCheckService.lastCheck$ | async | localeDate : 'mediumTime' }}\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </vdr-ab-left>\\r\\n            <vdr-ab-right>\\r\\n                <vdr-action-bar-items locationId=\\\"system-status\\\"></vdr-action-bar-items>\\r\\n                <button class=\\\"btn btn-secondary\\\" (click)=\\\"healthCheckService.refresh()\\\">\\r\\n                    <clr-icon shape=\\\"refresh\\\"></clr-icon> {{ 'system.health-refresh' | translate }}\\r\\n                </button>\\r\\n            </vdr-ab-right>\\r\\n        </vdr-action-bar>\\r\\n    </vdr-page-block>\\r\\n    <vdr-page-block>\\r\\n        <table class=\\\"table\\\">\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <th class=\\\"left\\\">\\r\\n                        {{ 'common.name' | translate }}\\r\\n                    </th>\\r\\n                    <th class=\\\"left\\\">\\r\\n                        {{ 'system.health-status' | translate }}\\r\\n                    </th>\\r\\n                    <th class=\\\"left\\\">\\r\\n                        {{ 'system.health-message' | translate }}\\r\\n                    </th>\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n                <tr *ngFor=\\\"let row of healthCheckService.details$ | async\\\">\\r\\n                    <td class=\\\"align-middle left\\\">{{ row.key }}</td>\\r\\n                    <td class=\\\"align-middle left\\\">\\r\\n                        <vdr-chip [colorType]=\\\"row.result.status === 'up' ? 'success' : 'error'\\\">\\r\\n                            <ng-container *ngIf=\\\"row.result.status === 'up'; else down\\\">\\r\\n                                <clr-icon shape=\\\"check-circle\\\"></clr-icon>\\r\\n                                {{ 'system.health-status-up' | translate }}\\r\\n                            </ng-container>\\r\\n                            <ng-template #down>\\r\\n                                <clr-icon shape=\\\"exclamation-circle\\\"></clr-icon>\\r\\n                                {{ 'system.health-status-down' | translate }}\\r\\n                            </ng-template>\\r\\n                        </vdr-chip>\\r\\n                    </td>\\r\\n                    <td class=\\\"align-middle left\\\">{{ row.result.message }}</td>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n    </vdr-page-block>\\r\\n</vdr-page-body>\\r\\n\", styles: [\".system-status-header{display:flex;justify-content:space-between;align-items:flex-start}.system-status-header .status-detail{font-weight:700;margin-inline-end:6px}.system-status-header .last-checked{font-weight:400;color:var(--color-grey-500)}\\n\"], dependencies: [{ kind: \"directive\", type: i3.ClrIconCustomTag, selector: \"clr-icon\" }, { kind: \"directive\", type: i3$1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i1.ActionBarComponent, selector: \"vdr-action-bar\" }, { kind: \"component\", type: i1.ActionBarLeftComponent, selector: \"vdr-ab-left\", inputs: [\"grow\"] }, { kind: \"component\", type: i1.ActionBarRightComponent, selector: \"vdr-ab-right\", inputs: [\"grow\"] }, { kind: \"component\", type: i1.ChipComponent, selector: \"vdr-chip\", inputs: [\"icon\", \"invert\", \"colorFrom\", \"colorType\"], outputs: [\"iconClick\"] }, { kind: \"component\", type: i1.ActionBarItemsComponent, selector: \"vdr-action-bar-items\" }, { kind: \"component\", type: i1.PageHeaderComponent, selector: \"vdr-page-header\" }, { kind: \"component\", type: i1.PageTitleComponent, selector: \"vdr-page-title\", inputs: [\"title\"] }, { kind: \"component\", type: i1.PageBodyComponent, selector: \"vdr-page-body\" }, { kind: \"component\", type: i1.PageBlockComponent, selector: \"vdr-page-block\" }, { kind: \"pipe\", type: i3$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }, { kind: \"pipe\", type: i1.LocaleDatePipe, name: \"localeDate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: HealthCheckComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'vdr-health-check', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<vdr-page-header>\\r\\n    <vdr-page-title></vdr-page-title>\\r\\n</vdr-page-header>\\r\\n<vdr-page-body>\\r\\n    <vdr-page-block>\\r\\n        <vdr-action-bar>\\r\\n            <vdr-ab-left>\\r\\n                <div class=\\\"system-status-header\\\" *ngIf=\\\"healthCheckService.status$ | async as status\\\">\\r\\n                    <div class=\\\"status-icon\\\">\\r\\n                        <clr-icon\\r\\n                            [attr.shape]=\\\"status === 'ok' ? 'check-circle' : 'exclamation-circle'\\\"\\r\\n                            [ngClass]=\\\"{ 'is-success': status === 'ok', 'is-danger': status !== 'ok' }\\\"\\r\\n                            size=\\\"48\\\"\\r\\n                        ></clr-icon>\\r\\n                    </div>\\r\\n                    <div class=\\\"status-detail\\\">\\r\\n                        <ng-container *ngIf=\\\"status === 'ok'; else error\\\">\\r\\n                            {{ 'system.health-all-systems-up' | translate }}\\r\\n                        </ng-container>\\r\\n                        <ng-template #error>\\r\\n                            {{ 'system.health-error' | translate }}\\r\\n                        </ng-template>\\r\\n                        <div class=\\\"last-checked\\\">\\r\\n                            {{ 'system.health-last-checked' | translate }}:\\r\\n                            {{ healthCheckService.lastCheck$ | async | localeDate : 'mediumTime' }}\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </vdr-ab-left>\\r\\n            <vdr-ab-right>\\r\\n                <vdr-action-bar-items locationId=\\\"system-status\\\"></vdr-action-bar-items>\\r\\n                <button class=\\\"btn btn-secondary\\\" (click)=\\\"healthCheckService.refresh()\\\">\\r\\n                    <clr-icon shape=\\\"refresh\\\"></clr-icon> {{ 'system.health-refresh' | translate }}\\r\\n                </button>\\r\\n            </vdr-ab-right>\\r\\n        </vdr-action-bar>\\r\\n    </vdr-page-block>\\r\\n    <vdr-page-block>\\r\\n        <table class=\\\"table\\\">\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <th class=\\\"left\\\">\\r\\n                        {{ 'common.name' | translate }}\\r\\n                    </th>\\r\\n                    <th class=\\\"left\\\">\\r\\n                        {{ 'system.health-status' | translate }}\\r\\n                    </th>\\r\\n                    <th class=\\\"left\\\">\\r\\n                        {{ 'system.health-message' | translate }}\\r\\n                    </th>\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n                <tr *ngFor=\\\"let row of healthCheckService.details$ | async\\\">\\r\\n                    <td class=\\\"align-middle left\\\">{{ row.key }}</td>\\r\\n                    <td class=\\\"align-middle left\\\">\\r\\n                        <vdr-chip [colorType]=\\\"row.result.status === 'up' ? 'success' : 'error'\\\">\\r\\n                            <ng-container *ngIf=\\\"row.result.status === 'up'; else down\\\">\\r\\n                                <clr-icon shape=\\\"check-circle\\\"></clr-icon>\\r\\n                                {{ 'system.health-status-up' | translate }}\\r\\n                            </ng-container>\\r\\n                            <ng-template #down>\\r\\n                                <clr-icon shape=\\\"exclamation-circle\\\"></clr-icon>\\r\\n                                {{ 'system.health-status-down' | translate }}\\r\\n                            </ng-template>\\r\\n                        </vdr-chip>\\r\\n                    </td>\\r\\n                    <td class=\\\"align-middle left\\\">{{ row.result.message }}</td>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n    </vdr-page-block>\\r\\n</vdr-page-body>\\r\\n\", styles: [\".system-status-header{display:flex;justify-content:space-between;align-items:flex-start}.system-status-header .status-detail{font-weight:700;margin-inline-end:6px}.system-status-header .last-checked{font-weight:400;color:var(--color-grey-500)}\\n\"] }]\n        }], ctorParameters: () => [{ type: i1.HealthCheckService }] });\n\nclass JobStateLabelComponent {\n    get iconShape() {\n        switch (this.job.state) {\n            case JobState.COMPLETED:\n                return 'check-circle';\n            case JobState.FAILED:\n                return 'exclamation-circle';\n            case JobState.CANCELLED:\n                return 'ban';\n            case JobState.PENDING:\n            case JobState.RETRYING:\n                return 'hourglass';\n            case JobState.RUNNING:\n                return 'sync';\n        }\n    }\n    get colorType() {\n        switch (this.job.state) {\n            case JobState.COMPLETED:\n                return 'success';\n            case JobState.FAILED:\n            case JobState.CANCELLED:\n                return 'error';\n            case JobState.PENDING:\n            case JobState.RETRYING:\n                return '';\n            case JobState.RUNNING:\n                return 'warning';\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: JobStateLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: JobStateLabelComponent, selector: \"vdr-job-state-label\", inputs: { job: \"job\" }, ngImport: i0, template: \"<vdr-chip [colorType]=\\\"colorType\\\">\\r\\n    <clr-icon [attr.shape]=\\\"iconShape\\\" class=\\\"mr1\\\"></clr-icon>\\r\\n    {{ job.state | titlecase }}\\r\\n    <span *ngIf=\\\"job.state === 'RUNNING'\\\" class=\\\"progress\\\">\\r\\n        {{ (job.progress / 100) | percent }}\\r\\n    </span>\\r\\n</vdr-chip>\\r\\n\", styles: [\".progress{margin-inline-start:3px}clr-icon{min-width:12px}\\n\"], dependencies: [{ kind: \"directive\", type: i3.ClrIconCustomTag, selector: \"clr-icon\" }, { kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i1.ChipComponent, selector: \"vdr-chip\", inputs: [\"icon\", \"invert\", \"colorFrom\", \"colorType\"], outputs: [\"iconClick\"] }, { kind: \"pipe\", type: i3$1.PercentPipe, name: \"percent\" }, { kind: \"pipe\", type: i3$1.TitleCasePipe, name: \"titlecase\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: JobStateLabelComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'vdr-job-state-label', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<vdr-chip [colorType]=\\\"colorType\\\">\\r\\n    <clr-icon [attr.shape]=\\\"iconShape\\\" class=\\\"mr1\\\"></clr-icon>\\r\\n    {{ job.state | titlecase }}\\r\\n    <span *ngIf=\\\"job.state === 'RUNNING'\\\" class=\\\"progress\\\">\\r\\n        {{ (job.progress / 100) | percent }}\\r\\n    </span>\\r\\n</vdr-chip>\\r\\n\", styles: [\".progress{margin-inline-start:3px}clr-icon{min-width:12px}\\n\"] }]\n        }], propDecorators: { job: [{\n                type: Input\n            }] } });\n\nclass JobListComponent extends BaseListComponent {\n    constructor(dataService, router, route) {\n        super(router, route);\n        this.dataService = dataService;\n        this.liveUpdate = new FormControl(true);\n        this.queueFilter = new FormControl('all');\n        this.stateFilter = new FormControl('');\n        super.setQueryFn((...args) => this.dataService.settings.getAllJobs(...args), data => data.jobs, (skip, take) => {\n            const queueFilter = this.queueFilter.value === 'all' ? null : { queueName: { eq: this.queueFilter.value } };\n            const stateFilter = this.stateFilter.value;\n            return {\n                options: {\n                    skip,\n                    take,\n                    filter: {\n                        ...queueFilter,\n                        ...(stateFilter ? { state: { eq: stateFilter } } : {}),\n                    },\n                    sort: {\n                        createdAt: SortOrder.DESC,\n                    },\n                },\n            };\n        });\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        timer(5000, 2000)\n            .pipe(takeUntil(this.destroy$), filter(() => !!this.liveUpdate.value))\n            .subscribe(() => {\n            this.refresh();\n        });\n        this.queues$ = this.dataService.settings\n            .getJobQueues()\n            .mapStream(res => res.jobQueues)\n            .pipe(map(queues => [{ name: 'all', running: true }, ...queues]));\n    }\n    hasResult(job) {\n        const result = job.result;\n        if (result == null) {\n            return false;\n        }\n        if (typeof result === 'object') {\n            return Object.keys(result).length > 0;\n        }\n        return true;\n    }\n    cancelJob(id) {\n        this.dataService.settings.cancelJob(id).subscribe(() => this.refresh());\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: JobListComponent, deps: [{ token: i1.DataService }, { token: i2.Router }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.12\", type: JobListComponent, selector: \"vdr-job-list\", usesInheritance: true, ngImport: i0, template: \"<vdr-page-header>\\r\\n    <vdr-page-title></vdr-page-title>\\r\\n</vdr-page-header>\\r\\n<vdr-page-body>\\r\\n    <vdr-page-block>\\r\\n        <vdr-action-bar>\\r\\n            <vdr-ab-left>\\r\\n                <clr-checkbox-wrapper class=\\\"mr-2\\\">\\r\\n                    <input type=\\\"checkbox\\\" clrCheckbox [formControl]=\\\"liveUpdate\\\" name=\\\"live-update\\\" />\\r\\n                    <label>{{ 'common.live-update' | translate }}</label>\\r\\n                </clr-checkbox-wrapper>\\r\\n            </vdr-ab-left>\\r\\n            <vdr-ab-right>\\r\\n                <vdr-action-bar-items locationId=\\\"job-list\\\"></vdr-action-bar-items>\\r\\n                <ng-select\\r\\n                    class=\\\"mr-2\\\"\\r\\n                    [addTag]=\\\"false\\\"\\r\\n                    [hideSelected]=\\\"true\\\"\\r\\n                    [multiple]=\\\"false\\\"\\r\\n                    [markFirst]=\\\"false\\\"\\r\\n                    [clearable]=\\\"false\\\"\\r\\n                    [searchable]=\\\"false\\\"\\r\\n                    [formControl]=\\\"stateFilter\\\"\\r\\n                    (change)=\\\"refresh()\\\"\\r\\n                >\\r\\n                    <ng-option [value]=\\\"''\\\">\\r\\n                        <vdr-chip>{{ 'system.job-state-all' | translate }}</vdr-chip>\\r\\n                    </ng-option>\\r\\n                    <ng-option [value]=\\\"'PENDING'\\\">\\r\\n                        <vdr-chip>{{ 'system.job-state-pending' | translate }}</vdr-chip>\\r\\n                    </ng-option>\\r\\n                    <ng-option [value]=\\\"'RUNNING'\\\">\\r\\n                        <vdr-chip colorType=\\\"warning\\\">{{ 'system.job-state-running' | translate }}</vdr-chip>\\r\\n                    </ng-option>\\r\\n                    <ng-option [value]=\\\"'COMPLETED'\\\">\\r\\n                        <vdr-chip colorType=\\\"success\\\">{{ 'system.job-state-completed' | translate }}</vdr-chip>\\r\\n                    </ng-option>\\r\\n                    <ng-option [value]=\\\"'FAILED'\\\">\\r\\n                        <vdr-chip colorType=\\\"error\\\">{{ 'system.job-state-failed' | translate }}</vdr-chip>\\r\\n                    </ng-option>\\r\\n                    <ng-option [value]=\\\"'CANCELLED'\\\">\\r\\n                        <vdr-chip colorType=\\\"error\\\">{{ 'system.job-state-cancelled' | translate }}</vdr-chip>\\r\\n                    </ng-option>\\r\\n                </ng-select>\\r\\n                <ng-select\\r\\n                    [addTag]=\\\"false\\\"\\r\\n                    [items]=\\\"queues$ | async\\\"\\r\\n                    [hideSelected]=\\\"true\\\"\\r\\n                    [multiple]=\\\"false\\\"\\r\\n                    [markFirst]=\\\"false\\\"\\r\\n                    [clearable]=\\\"false\\\"\\r\\n                    [searchable]=\\\"false\\\"\\r\\n                    bindValue=\\\"name\\\"\\r\\n                    [formControl]=\\\"queueFilter\\\"\\r\\n                    (change)=\\\"refresh()\\\"\\r\\n                >\\r\\n                    <ng-template ng-label-tmp ng-option-tmp let-item=\\\"item\\\">\\r\\n                        <ng-container *ngIf=\\\"item.name === 'all'; else others\\\">\\r\\n                            <vdr-chip>{{ 'system.all-job-queues' | translate }}</vdr-chip>\\r\\n                        </ng-container>\\r\\n                        <ng-template #others>\\r\\n                            <vdr-chip [colorFrom]=\\\"item.name\\\">{{ item.name }}</vdr-chip>\\r\\n                        </ng-template>\\r\\n                    </ng-template>\\r\\n                </ng-select>\\r\\n            </vdr-ab-right>\\r\\n        </vdr-action-bar>\\r\\n    </vdr-page-block>\\r\\n\\r\\n    <vdr-data-table-2\\r\\n        id=\\\"job-list\\\"\\r\\n        [items]=\\\"items$ | async\\\"\\r\\n        [itemsPerPage]=\\\"itemsPerPage$ | async\\\"\\r\\n        [totalItems]=\\\"totalItems$ | async\\\"\\r\\n        [currentPage]=\\\"currentPage$ | async\\\"\\r\\n        (pageChange)=\\\"setPageNumber($event)\\\"\\r\\n        (itemsPerPageChange)=\\\"setItemsPerPage($event)\\\"\\r\\n    >\\r\\n        <vdr-dt2-column [heading]=\\\"'common.id' | translate\\\" id=\\\"id\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                {{ job.id }}\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n        <vdr-dt2-column [heading]=\\\"'common.created-at' | translate\\\" id=\\\"created-at\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                {{ job.createdAt | timeAgo }}\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n        <vdr-dt2-column [heading]=\\\"'system.job-queue-name' | translate\\\" id=\\\"job-queue-name\\\" [optional]=\\\"false\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                <vdr-chip [colorFrom]=\\\"job.queueName\\\">{{ job.queueName }}</vdr-chip>\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n        <vdr-dt2-column [heading]=\\\"'system.job-data' | translate\\\" id=\\\"job-data\\\" [optional]=\\\"false\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                <vdr-dropdown *ngIf=\\\"job.data\\\">\\r\\n                    <button\\r\\n                        class=\\\"button-small\\\"\\r\\n                        vdrDropdownTrigger\\r\\n                        [title]=\\\"'system.job-data' | translate\\\"\\r\\n                    >\\r\\n                        <clr-icon shape=\\\"details\\\"></clr-icon>\\r\\n                    </button>\\r\\n                    <vdr-dropdown-menu>\\r\\n                        <div class=\\\"result-detail\\\">\\r\\n                            <vdr-object-tree [value]=\\\"job.data\\\"></vdr-object-tree>\\r\\n                        </div>\\r\\n                    </vdr-dropdown-menu>\\r\\n                </vdr-dropdown>\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n        <vdr-dt2-column [heading]=\\\"'system.job-state' | translate\\\" id=\\\"job-state\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                <vdr-job-state-label [job]=\\\"job\\\"></vdr-job-state-label>\\r\\n                <div *ngIf=\\\"job.state === 'FAILED'\\\" class=\\\"retry-info\\\">after {{ job.attempts }} attempts</div>\\r\\n                <div *ngIf=\\\"job.state === 'RUNNING' || job.state === 'RETRYING'\\\" class=\\\"retry-info\\\">\\r\\n                    attempting {{ job.attempts }} of {{ job.retries + 1 }}\\r\\n                </div>\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n        <vdr-dt2-column [heading]=\\\"'system.job-duration' | translate\\\" id=\\\"job-duration\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                {{ job.duration | duration }}\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n        <vdr-dt2-column [heading]=\\\"'system.job-result' | translate\\\" id=\\\"job-result\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                <vdr-dropdown *ngIf=\\\"hasResult(job)\\\">\\r\\n                    <button class=\\\"button-small mr-1\\\" vdrDropdownTrigger>\\r\\n                        <clr-icon shape=\\\"details\\\"></clr-icon>\\r\\n                        {{ 'system.job-result' | translate }}\\r\\n                    </button>\\r\\n                    <vdr-dropdown-menu>\\r\\n                        <div class=\\\"result-detail\\\">\\r\\n                            <vdr-object-tree [value]=\\\"job.result\\\"></vdr-object-tree>\\r\\n                        </div>\\r\\n                    </vdr-dropdown-menu>\\r\\n                </vdr-dropdown>\\r\\n                <vdr-dropdown *ngIf=\\\"job.error\\\">\\r\\n                    <button class=\\\"button-small\\\" vdrDropdownTrigger>\\r\\n                        <clr-icon shape=\\\"exclamation-circle\\\"></clr-icon>\\r\\n                        {{ 'system.job-error' | translate }}\\r\\n                    </button>\\r\\n                    <vdr-dropdown-menu>\\r\\n                        <div class=\\\"result-detail\\\">\\r\\n                            {{ job.error }}\\r\\n                        </div>\\r\\n                    </vdr-dropdown-menu>\\r\\n                </vdr-dropdown>\\r\\n                <vdr-dropdown *ngIf=\\\"!job.isSettled && job.state !== 'FAILED'\\\">\\r\\n                    <button class=\\\"icon-button\\\" vdrDropdownTrigger>\\r\\n                        <clr-icon shape=\\\"ellipsis-vertical\\\" size=\\\"12\\\"></clr-icon>\\r\\n                    </button>\\r\\n                    <vdr-dropdown-menu vdrPosition=\\\"bottom-right\\\">\\r\\n                        <button\\r\\n                            type=\\\"button\\\"\\r\\n                            class=\\\"delete-button\\\"\\r\\n                            (click)=\\\"cancelJob(job.id)\\\"\\r\\n                            [disabled]=\\\"!(['DeleteSettings', 'DeleteSystem'] | hasPermission)\\\"\\r\\n                            vdrDropdownItem\\r\\n                        >\\r\\n                            <clr-icon shape=\\\"ban\\\" class=\\\"is-danger\\\"></clr-icon>\\r\\n                            {{ 'common.cancel' | translate }}\\r\\n                        </button>\\r\\n                    </vdr-dropdown-menu>\\r\\n                </vdr-dropdown>\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n    </vdr-data-table-2>\\r\\n</vdr-page-body>\\r\\n\", styles: [\".result-detail{margin:0 12px}.retry-info{margin-inline-start:6px;color:var(--color-grey-400)}\\n\"], dependencies: [{ kind: \"directive\", type: i3.ClrIconCustomTag, selector: \"clr-icon\" }, { kind: \"directive\", type: i3.ClrLabel, selector: \"label\", inputs: [\"for\"] }, { kind: \"directive\", type: i3.ClrCheckbox, selector: \"[clrCheckbox],[clrToggle]\" }, { kind: \"component\", type: i3.ClrCheckboxWrapper, selector: \"clr-checkbox-wrapper,clr-toggle-wrapper\" }, { kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i5.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { kind: \"directive\", type: i5.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i5.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { kind: \"component\", type: i6.NgSelectComponent, selector: \"ng-select\", inputs: [\"bindLabel\", \"bindValue\", \"markFirst\", \"placeholder\", \"notFoundText\", \"typeToSearchText\", \"addTagText\", \"loadingText\", \"clearAllText\", \"appearance\", \"dropdownPosition\", \"appendTo\", \"loading\", \"closeOnSelect\", \"hideSelected\", \"selectOnTab\", \"openOnEnter\", \"maxSelectedItems\", \"groupBy\", \"groupValue\", \"bufferAmount\", \"virtualScroll\", \"selectableGroup\", \"selectableGroupAsModel\", \"searchFn\", \"trackByFn\", \"clearOnBackspace\", \"labelForId\", \"inputAttrs\", \"tabIndex\", \"readonly\", \"searchWhileComposing\", \"minTermLength\", \"editableSearchTerm\", \"keyDownFn\", \"typeahead\", \"multiple\", \"addTag\", \"searchable\", \"clearable\", \"isOpen\", \"items\", \"compareWith\", \"clearSearchOnAdd\", \"deselectOnClick\"], outputs: [\"blur\", \"focus\", \"change\", \"open\", \"close\", \"search\", \"clear\", \"add\", \"remove\", \"scroll\", \"scrollToEnd\"] }, { kind: \"component\", type: i6.NgOptionComponent, selector: \"ng-option\", inputs: [\"value\", \"disabled\"] }, { kind: \"directive\", type: i6.NgOptionTemplateDirective, selector: \"[ng-option-tmp]\" }, { kind: \"directive\", type: i6.NgLabelTemplateDirective, selector: \"[ng-label-tmp]\" }, { kind: \"component\", type: i1.ActionBarComponent, selector: \"vdr-action-bar\" }, { kind: \"component\", type: i1.ActionBarLeftComponent, selector: \"vdr-ab-left\", inputs: [\"grow\"] }, { kind: \"component\", type: i1.ActionBarRightComponent, selector: \"vdr-ab-right\", inputs: [\"grow\"] }, { kind: \"component\", type: i1.ChipComponent, selector: \"vdr-chip\", inputs: [\"icon\", \"invert\", \"colorFrom\", \"colorType\"], outputs: [\"iconClick\"] }, { kind: \"directive\", type: i1.FormFieldControlDirective, selector: \"input, textarea, select, vdr-currency-input\" }, { kind: \"component\", type: i1.DropdownComponent, selector: \"vdr-dropdown\", inputs: [\"manualToggle\"] }, { kind: \"component\", type: i1.DropdownMenuComponent, selector: \"vdr-dropdown-menu\", inputs: [\"vdrPosition\", \"customClasses\"] }, { kind: \"directive\", type: i1.DropdownTriggerDirective, selector: \"[vdrDropdownTrigger]\" }, { kind: \"directive\", type: i1.DropdownItemDirective, selector: \"[vdrDropdownItem]\" }, { kind: \"component\", type: i1.ObjectTreeComponent, selector: \"vdr-object-tree\", inputs: [\"value\", \"isArrayItem\"] }, { kind: \"component\", type: i1.ActionBarItemsComponent, selector: \"vdr-action-bar-items\" }, { kind: \"component\", type: i1.DataTable2Component, selector: \"vdr-data-table-2\", inputs: [\"id\", \"items\", \"itemsPerPage\", \"currentPage\", \"totalItems\", \"emptyStateLabel\", \"filters\", \"activeIndex\"], outputs: [\"pageChange\", \"itemsPerPageChange\", \"visibleColumnsChange\"] }, { kind: \"component\", type: i1.DataTable2ColumnComponent, selector: \"vdr-dt2-column\", inputs: [\"id\", \"expand\", \"heading\", \"align\", \"sort\", \"optional\", \"hiddenByDefault\", \"orderable\"], exportAs: [\"row\"] }, { kind: \"component\", type: i1.PageHeaderComponent, selector: \"vdr-page-header\" }, { kind: \"component\", type: i1.PageTitleComponent, selector: \"vdr-page-title\", inputs: [\"title\"] }, { kind: \"component\", type: i1.PageBodyComponent, selector: \"vdr-page-body\" }, { kind: \"component\", type: i1.PageBlockComponent, selector: \"vdr-page-block\" }, { kind: \"component\", type: JobStateLabelComponent, selector: \"vdr-job-state-label\", inputs: [\"job\"] }, { kind: \"pipe\", type: i3$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }, { kind: \"pipe\", type: i1.HasPermissionPipe, name: \"hasPermission\" }, { kind: \"pipe\", type: i1.TimeAgoPipe, name: \"timeAgo\" }, { kind: \"pipe\", type: i1.DurationPipe, name: \"duration\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: JobListComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'vdr-job-list', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<vdr-page-header>\\r\\n    <vdr-page-title></vdr-page-title>\\r\\n</vdr-page-header>\\r\\n<vdr-page-body>\\r\\n    <vdr-page-block>\\r\\n        <vdr-action-bar>\\r\\n            <vdr-ab-left>\\r\\n                <clr-checkbox-wrapper class=\\\"mr-2\\\">\\r\\n                    <input type=\\\"checkbox\\\" clrCheckbox [formControl]=\\\"liveUpdate\\\" name=\\\"live-update\\\" />\\r\\n                    <label>{{ 'common.live-update' | translate }}</label>\\r\\n                </clr-checkbox-wrapper>\\r\\n            </vdr-ab-left>\\r\\n            <vdr-ab-right>\\r\\n                <vdr-action-bar-items locationId=\\\"job-list\\\"></vdr-action-bar-items>\\r\\n                <ng-select\\r\\n                    class=\\\"mr-2\\\"\\r\\n                    [addTag]=\\\"false\\\"\\r\\n                    [hideSelected]=\\\"true\\\"\\r\\n                    [multiple]=\\\"false\\\"\\r\\n                    [markFirst]=\\\"false\\\"\\r\\n                    [clearable]=\\\"false\\\"\\r\\n                    [searchable]=\\\"false\\\"\\r\\n                    [formControl]=\\\"stateFilter\\\"\\r\\n                    (change)=\\\"refresh()\\\"\\r\\n                >\\r\\n                    <ng-option [value]=\\\"''\\\">\\r\\n                        <vdr-chip>{{ 'system.job-state-all' | translate }}</vdr-chip>\\r\\n                    </ng-option>\\r\\n                    <ng-option [value]=\\\"'PENDING'\\\">\\r\\n                        <vdr-chip>{{ 'system.job-state-pending' | translate }}</vdr-chip>\\r\\n                    </ng-option>\\r\\n                    <ng-option [value]=\\\"'RUNNING'\\\">\\r\\n                        <vdr-chip colorType=\\\"warning\\\">{{ 'system.job-state-running' | translate }}</vdr-chip>\\r\\n                    </ng-option>\\r\\n                    <ng-option [value]=\\\"'COMPLETED'\\\">\\r\\n                        <vdr-chip colorType=\\\"success\\\">{{ 'system.job-state-completed' | translate }}</vdr-chip>\\r\\n                    </ng-option>\\r\\n                    <ng-option [value]=\\\"'FAILED'\\\">\\r\\n                        <vdr-chip colorType=\\\"error\\\">{{ 'system.job-state-failed' | translate }}</vdr-chip>\\r\\n                    </ng-option>\\r\\n                    <ng-option [value]=\\\"'CANCELLED'\\\">\\r\\n                        <vdr-chip colorType=\\\"error\\\">{{ 'system.job-state-cancelled' | translate }}</vdr-chip>\\r\\n                    </ng-option>\\r\\n                </ng-select>\\r\\n                <ng-select\\r\\n                    [addTag]=\\\"false\\\"\\r\\n                    [items]=\\\"queues$ | async\\\"\\r\\n                    [hideSelected]=\\\"true\\\"\\r\\n                    [multiple]=\\\"false\\\"\\r\\n                    [markFirst]=\\\"false\\\"\\r\\n                    [clearable]=\\\"false\\\"\\r\\n                    [searchable]=\\\"false\\\"\\r\\n                    bindValue=\\\"name\\\"\\r\\n                    [formControl]=\\\"queueFilter\\\"\\r\\n                    (change)=\\\"refresh()\\\"\\r\\n                >\\r\\n                    <ng-template ng-label-tmp ng-option-tmp let-item=\\\"item\\\">\\r\\n                        <ng-container *ngIf=\\\"item.name === 'all'; else others\\\">\\r\\n                            <vdr-chip>{{ 'system.all-job-queues' | translate }}</vdr-chip>\\r\\n                        </ng-container>\\r\\n                        <ng-template #others>\\r\\n                            <vdr-chip [colorFrom]=\\\"item.name\\\">{{ item.name }}</vdr-chip>\\r\\n                        </ng-template>\\r\\n                    </ng-template>\\r\\n                </ng-select>\\r\\n            </vdr-ab-right>\\r\\n        </vdr-action-bar>\\r\\n    </vdr-page-block>\\r\\n\\r\\n    <vdr-data-table-2\\r\\n        id=\\\"job-list\\\"\\r\\n        [items]=\\\"items$ | async\\\"\\r\\n        [itemsPerPage]=\\\"itemsPerPage$ | async\\\"\\r\\n        [totalItems]=\\\"totalItems$ | async\\\"\\r\\n        [currentPage]=\\\"currentPage$ | async\\\"\\r\\n        (pageChange)=\\\"setPageNumber($event)\\\"\\r\\n        (itemsPerPageChange)=\\\"setItemsPerPage($event)\\\"\\r\\n    >\\r\\n        <vdr-dt2-column [heading]=\\\"'common.id' | translate\\\" id=\\\"id\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                {{ job.id }}\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n        <vdr-dt2-column [heading]=\\\"'common.created-at' | translate\\\" id=\\\"created-at\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                {{ job.createdAt | timeAgo }}\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n        <vdr-dt2-column [heading]=\\\"'system.job-queue-name' | translate\\\" id=\\\"job-queue-name\\\" [optional]=\\\"false\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                <vdr-chip [colorFrom]=\\\"job.queueName\\\">{{ job.queueName }}</vdr-chip>\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n        <vdr-dt2-column [heading]=\\\"'system.job-data' | translate\\\" id=\\\"job-data\\\" [optional]=\\\"false\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                <vdr-dropdown *ngIf=\\\"job.data\\\">\\r\\n                    <button\\r\\n                        class=\\\"button-small\\\"\\r\\n                        vdrDropdownTrigger\\r\\n                        [title]=\\\"'system.job-data' | translate\\\"\\r\\n                    >\\r\\n                        <clr-icon shape=\\\"details\\\"></clr-icon>\\r\\n                    </button>\\r\\n                    <vdr-dropdown-menu>\\r\\n                        <div class=\\\"result-detail\\\">\\r\\n                            <vdr-object-tree [value]=\\\"job.data\\\"></vdr-object-tree>\\r\\n                        </div>\\r\\n                    </vdr-dropdown-menu>\\r\\n                </vdr-dropdown>\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n        <vdr-dt2-column [heading]=\\\"'system.job-state' | translate\\\" id=\\\"job-state\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                <vdr-job-state-label [job]=\\\"job\\\"></vdr-job-state-label>\\r\\n                <div *ngIf=\\\"job.state === 'FAILED'\\\" class=\\\"retry-info\\\">after {{ job.attempts }} attempts</div>\\r\\n                <div *ngIf=\\\"job.state === 'RUNNING' || job.state === 'RETRYING'\\\" class=\\\"retry-info\\\">\\r\\n                    attempting {{ job.attempts }} of {{ job.retries + 1 }}\\r\\n                </div>\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n        <vdr-dt2-column [heading]=\\\"'system.job-duration' | translate\\\" id=\\\"job-duration\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                {{ job.duration | duration }}\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n        <vdr-dt2-column [heading]=\\\"'system.job-result' | translate\\\" id=\\\"job-result\\\">\\r\\n            <ng-template let-job=\\\"item\\\">\\r\\n                <vdr-dropdown *ngIf=\\\"hasResult(job)\\\">\\r\\n                    <button class=\\\"button-small mr-1\\\" vdrDropdownTrigger>\\r\\n                        <clr-icon shape=\\\"details\\\"></clr-icon>\\r\\n                        {{ 'system.job-result' | translate }}\\r\\n                    </button>\\r\\n                    <vdr-dropdown-menu>\\r\\n                        <div class=\\\"result-detail\\\">\\r\\n                            <vdr-object-tree [value]=\\\"job.result\\\"></vdr-object-tree>\\r\\n                        </div>\\r\\n                    </vdr-dropdown-menu>\\r\\n                </vdr-dropdown>\\r\\n                <vdr-dropdown *ngIf=\\\"job.error\\\">\\r\\n                    <button class=\\\"button-small\\\" vdrDropdownTrigger>\\r\\n                        <clr-icon shape=\\\"exclamation-circle\\\"></clr-icon>\\r\\n                        {{ 'system.job-error' | translate }}\\r\\n                    </button>\\r\\n                    <vdr-dropdown-menu>\\r\\n                        <div class=\\\"result-detail\\\">\\r\\n                            {{ job.error }}\\r\\n                        </div>\\r\\n                    </vdr-dropdown-menu>\\r\\n                </vdr-dropdown>\\r\\n                <vdr-dropdown *ngIf=\\\"!job.isSettled && job.state !== 'FAILED'\\\">\\r\\n                    <button class=\\\"icon-button\\\" vdrDropdownTrigger>\\r\\n                        <clr-icon shape=\\\"ellipsis-vertical\\\" size=\\\"12\\\"></clr-icon>\\r\\n                    </button>\\r\\n                    <vdr-dropdown-menu vdrPosition=\\\"bottom-right\\\">\\r\\n                        <button\\r\\n                            type=\\\"button\\\"\\r\\n                            class=\\\"delete-button\\\"\\r\\n                            (click)=\\\"cancelJob(job.id)\\\"\\r\\n                            [disabled]=\\\"!(['DeleteSettings', 'DeleteSystem'] | hasPermission)\\\"\\r\\n                            vdrDropdownItem\\r\\n                        >\\r\\n                            <clr-icon shape=\\\"ban\\\" class=\\\"is-danger\\\"></clr-icon>\\r\\n                            {{ 'common.cancel' | translate }}\\r\\n                        </button>\\r\\n                    </vdr-dropdown-menu>\\r\\n                </vdr-dropdown>\\r\\n            </ng-template>\\r\\n        </vdr-dt2-column>\\r\\n    </vdr-data-table-2>\\r\\n</vdr-page-body>\\r\\n\", styles: [\".result-detail{margin:0 12px}.retry-info{margin-inline-start:6px;color:var(--color-grey-400)}\\n\"] }]\n        }], ctorParameters: () => [{ type: i1.DataService }, { type: i2.Router }, { type: i2.ActivatedRoute }] });\n\nconst systemRoutes = [\n    {\n        path: 'jobs',\n        component: JobListComponent,\n        data: {\n            breadcrumb: marker('breadcrumb.job-queue'),\n        },\n    },\n    {\n        path: 'system-status',\n        component: HealthCheckComponent,\n        data: {\n            breadcrumb: marker('breadcrumb.system-status'),\n        },\n    },\n];\n\nclass SystemModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: SystemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.3.12\", ngImport: i0, type: SystemModule, declarations: [HealthCheckComponent, JobListComponent, JobStateLabelComponent], imports: [SharedModule, i2.RouterModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: SystemModule, imports: [SharedModule, RouterModule.forChild(systemRoutes)] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.12\", ngImport: i0, type: SystemModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [HealthCheckComponent, JobListComponent, JobStateLabelComponent],\n                    imports: [SharedModule, RouterModule.forChild(systemRoutes)],\n                }]\n        }] });\n\n// This file was generated by the build-public-api.ts script\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HealthCheckComponent, JobListComponent, JobStateLabelComponent, SystemModule, systemRoutes };\n"],"x_google_ignoreList":[0]}