{"version":3,"file":"362.c9371c09fe4689a9.js","mappings":"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","names":["i0","banner_r2","assets","source","BannerComponent_div_9_img_2_Template","_r1","fileInput_r3","ctx_r3","triggerFileInput","$implicit","deleteBanner","id","$event","onUpdateAsset","length","GET_BANNERS","gql","BannerComponent","constructor","apollo","dataService","cdRef","this","banners","selectedAssetId","currentChannelId","ngOnInit","fetchActiveChannel","query","single$","subscribe","next","response","activeChannel","console","log","fetchBanners","error","err","watchQuery","fetchPolicy","valueChanges","result","data","customBanners","items","filter","banner","channels","some","channel","detectChanges","onAssetSelected","event","file","target","files","UPLOAD_ASSET","mutate","mutation","variables","input","context","useMultipart","createAssets","uploadedAsset","find","asset","onSubmit","createBanner","assetId","CREATE_BANNER","assetIds","refetchQueries","fileInput","click","bannerId","updateBanner","UPDATE_BANNER","DELETE_BANNER","i1","i2","selectors","standalone","features","decls","vars","consts","template","rf","ctx","BannerComponent_div_8_Template","BannerComponent_div_9_Template","SharedModule","i3","CommonModule","ReactiveFormsModule","styles","routes","registerRouteComponent","component","path","title","breadcrumb"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/extensions/banner-management-ui/banner.component.ts","./src/extensions/banner-management-ui/routes.ts"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '@vendure/admin-ui/core';\nimport { Apollo } from 'apollo-angular';\nimport gql from 'graphql-tag';\nimport { CommonModule } from '@angular/common';\nimport { DataService } from '@vendure/admin-ui/core'; \nimport { ChangeDetectorRef } from '@angular/core';\n\n\n\nconst GET_BANNERS = gql`\n  query GetBanners {\n    customBanners {\n      items {\n        id\n        assets {\n          id\n          source\n        }\n        channels {\n          id\n        }\n      }\n    }\n  }\n`;\n\n@Component({\n  selector: 'banner-management',\n  template: `\n <vdr-page-block>\n  \n\n  <!-- Upload Banner Section -->\n    <vdr-card>\n      <div class=\"upload-section\">\n        <vdr-form-field>\n          <input type=\"file\" (change)=\"onAssetSelected($event)\" accept=\"image/*\" />\n        </vdr-form-field>\n       <button vdr-button \n        type=\"submit\" \n        color=\"primary\" \n        [disabled]=\"!selectedAssetId\" \n        (click)=\"onSubmit()\"\n        class=\"custom-upload-btn\">\n    Upload Banner\n</button>\n\n      </div>\n    </vdr-card>\n\n  <!-- Display Banners in a Grid -->\n  <div class=\"banner-grid\">\n    <div *ngIf=\"banners.length === 0\" class=\"empty-state\">\n      <p>No banners available. Create one to get started!</p>\n    </div>\n\n    <div *ngFor=\"let banner of banners\" class=\"banner-card\">\n      <div class=\"banner-image\">\n        <img *ngIf=\"banner.assets.length > 0\" [src]=\"banner.assets[0].source\" class=\"image\" />\n      </div>\n\n      <div class=\"banner-info\">\n        \n        <div class=\"banner-actions\">\n          <button class=\"action-btn update-btn\" (click)=\"triggerFileInput(fileInput)\">Update Image</button>\n          <button class=\"action-btn delete-btn\" (click)=\"deleteBanner(banner.id)\">Delete</button>\n        </div>\n      </div>\n\n      <!-- Hidden input for file selection -->\n      <input type=\"file\" #fileInput (change)=\"onUpdateAsset($event, banner.id)\" accept=\"image/*\" style=\"display: none;\" />\n    </div>\n  </div>\n</vdr-page-block>\n\n  `,\n  styles: [`\n\n  \n  /* Upload Section - Responsive */\n  .upload-section {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n    gap: 12px;\n    padding: 16px;\n  }\n\n/* Custom button styling */\n.custom-upload-btn {\n    padding: 12px 24px;\n    background: linear-gradient(45deg, #4caf50, #45a049);\n    color: white;\n    border: none;\n    border-radius: 8px;\n    font-size: 16px;\n    font-weight: bold;\n    cursor: pointer;\n    transition: background 0.3s, transform 0.3s;\n    text-transform: uppercase;\n}\n\n/* Hover effect */\n.custom-upload-btn:hover {\n    background: linear-gradient(45deg, #45a049, #4caf50);\n    transform: scale(1.05);\n}\n\n/* Disabled state styling */\n.custom-upload-btn[disabled] {\n    background: #d3d3d3;\n    cursor: not-allowed;\n}\n\n\n.banner-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 16px;\n  padding: 16px;\n}\n\n.banner-card {\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  text-align: center;\n  transition: transform 0.3s ease-in-out;\n  padding: 16px;\n}\n\n.banner-card:hover {\n  transform: translateY(-8px);\n}\n\n.banner-image {\n  width: 100%;\n  height: 200px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f4f4f4;\n  border-radius: 6px;\n  overflow: hidden;\n}\n\n.banner-image img {\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n}\n\n.banner-info {\n  margin-top: 12px;\n}\n\n.banner-actions {\n  display: flex;\n  justify-content: space-between;\n  gap: 8px;\n}\n\n.action-btn {\n  padding: 8px 12px;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: 0.3s;\n}\n\n.update-btn {\n  background-color: #007bff;\n  color: white;\n}\n\n.update-btn:hover {\n  background-color: #0056b3;\n}\n\n.delete-btn {\n  background-color: #ff4d4d;\n  color: white;\n}\n\n.delete-btn:hover {\n  background-color: #cc0000;\n}\n\n.empty-state {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  \n  border-radius: 8px;\n}\n\n  `],\n  standalone: true,\n  imports: [SharedModule, CommonModule, ReactiveFormsModule],\n})\nexport class BannerComponent implements OnInit {\n  banners: Array<{ id: string, assets: { source: string }[], channels: { id: string }[] }> = [];\n  selectedAssetId: string | null = null;\n  currentChannelId: string | null = null;\n\n  constructor(private apollo: Apollo, private dataService: DataService, private cdRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this.fetchActiveChannel();\n  }\n\n  fetchActiveChannel() {\n    this.dataService\n      .query<{ activeChannel: { id: string } }>(\n        gql`\n          query GetActiveChannel {\n            activeChannel {\n              id\n            }\n          }\n        `\n      )\n      .single$.subscribe({\n        next: (response) => {\n          this.currentChannelId = response.activeChannel.id;\n          console.log(\"Active Channel ID:\", this.currentChannelId);\n          this.fetchBanners();\n        },\n        error: (err) => console.error('Failed to fetch active channel', err),\n      });\n  }\n\n  fetchBanners() {\n    if (!this.currentChannelId) return;\n\n    const GET_BANNERS = gql`\n  query GetBanners {\n    customBanners {\n      items {\n        id\n        assets {\n          id\n          source\n        }\n        channels {\n          id\n        }\n      }\n    }\n  }\n`;\n\n\n    this.apollo\n      .watchQuery<{ customBanners: { items: any[] } }>({\n        query: GET_BANNERS,\n          fetchPolicy: 'network-only'\n      })\n      .valueChanges.subscribe({\n        next: (result) => {\n          console.log(\"Fetched Banners:\", result.data.customBanners.items);\n          this.banners = result.data.customBanners.items.filter(banner => \n            banner.channels.some(channel => channel.id === this.currentChannelId)\n          );\n          this.cdRef.detectChanges(); \n          console.log(\"Filtered Banners:\", this.banners);\n        },\n        error: (err) => console.error('Failed to fetch banners', err),\n      });\n  }\n\n  onAssetSelected(event: any) {\n    const file: File = event.target.files[0];\n    if (!file) return;\n  \n    const UPLOAD_ASSET = gql`\n      mutation CreateAsset($input: [CreateAssetInput!]!) {\n        createAssets(input: $input) {\n          ... on Asset {\n            id\n            source\n          }\n          ... on MimeTypeError {\n            message\n            fileName\n          }\n        }\n      }\n    `;\n  \n    this.apollo\n      .mutate<{ createAssets: Array<{ id?: string; source?: string; message?: string }> }>({\n        mutation: UPLOAD_ASSET,\n        variables: { input: [{ file }] },\n        context: { useMultipart: true },\n      })\n      .subscribe({\n        next: (response) => {\n          console.log(\"Upload Response:\", response);\n          if (response.data && response.data.createAssets) {\n            const uploadedAsset = response.data.createAssets.find(asset => asset.id);\n            if (uploadedAsset?.id) {\n              this.selectedAssetId = uploadedAsset.id;\n              console.log(\"Selected Asset ID:\", this.selectedAssetId);\n            }\n          }\n        },\n        error: (err) => console.error(\"Asset upload failed\", err),\n      });\n  }\n  \n\n  onSubmit() {\n    if (!this.selectedAssetId) return;\n    this.createBanner(this.selectedAssetId);\n    this.selectedAssetId = null;\n  }\n\n  createBanner(assetId: string) {\n    if (!this.currentChannelId) return;\n\n    const CREATE_BANNER = gql`\n      mutation CreateCustomBanner($input: CreateCustomBannerInput!) {\n        createCustomBanner(input: $input) { id assets { source } }\n      }\n    `;\n\n  \n\n    this.apollo.mutate({\n      mutation: CREATE_BANNER,\n      variables: { input: { assetIds: [assetId] } },\n      refetchQueries: [{ query: GET_BANNERS }]\n    }).subscribe({\n      next: () => {\n        console.log(\"Banner created successfully\");\n      },\n      error: (err) => console.error(\"Create banner failed\", err),\n    });\n    \n    \n  }\n\n  triggerFileInput(fileInput: HTMLInputElement) {\n    fileInput.click();\n  }\n\n  onUpdateAsset(event: any, bannerId: string) {\n    const file: File = event.target.files[0];\n    if (!file) return;\n  \n    const UPLOAD_ASSET = gql`\n      mutation CreateAsset($input: [CreateAssetInput!]!) {\n        createAssets(input: $input) {\n          ... on Asset {\n            id\n            source\n          }\n          ... on MimeTypeError {\n            message\n            fileName\n          }\n        }\n      }\n    `;\n  \n    this.apollo\n      .mutate<{ createAssets: Array<{ id?: string; source?: string; message?: string }> }>({\n        mutation: UPLOAD_ASSET,\n        variables: { input: [{ file }] },\n        context: { useMultipart: true },\n      })\n      .subscribe({\n        next: (response) => {\n          console.log(\"Upload Response:\", response);\n          if (response.data && response.data.createAssets) {\n            const uploadedAsset = response.data.createAssets.find(asset => asset.id);\n            if (uploadedAsset?.id) {\n              this.updateBanner(bannerId, uploadedAsset.id);  // Call update method\n            }\n          }\n        },\n        error: (err) => console.error(\"Asset upload failed\", err),\n      });\n  }\n\n  updateBanner(bannerId: string, assetId: string) {\n    const UPDATE_BANNER = gql`\n      mutation UpdateCustomBanner($input: UpdateCustomBannerInput!) {\n        updateCustomBanner(input: $input) {\n          id\n          assets { source }\n        }\n      }\n    `;\n  \n    this.apollo.mutate({\n      mutation: UPDATE_BANNER,\n      variables: { input: { id: bannerId, assetIds: [assetId] } }, // Include id inside input\n    }).subscribe({\n      next: () => {\n        console.log(\"Banner updated successfully\");\n        this.fetchBanners();  // Refresh banners after update\n        this.cdRef.detectChanges();\n      },\n      error: (err) => console.error(\"Update banner failed\", err),\n    });\n  }\n  \n  \n  \n\n  deleteBanner(bannerId: string) {\n    const DELETE_BANNER = gql`\n      mutation DeleteCustomBanner($id: ID!) {\n        deleteCustomBanner(id: $id) { result }\n      }\n    `;\n\n    this.apollo.mutate({\n      mutation: DELETE_BANNER,\n      variables: { id: bannerId },\n      refetchQueries: [{ query: GET_BANNERS }]\n    }).subscribe({\n      next: () => {\n        this.fetchBanners();  // Refresh banners after deletion\n        console.log(\"Banner deleted successfully\");\n      },\n      error: (err) => console.error(\"Delete banner failed\", err)\n    });\n  }\n}\n","import { registerRouteComponent } from '@vendure/admin-ui/core';\r\nimport { BannerComponent } from './banner.component';\r\n\r\nexport default [\r\n    registerRouteComponent({\r\n        component: BannerComponent,\r\n        path: '',\r\n        title: 'Banner Management',\r\n        breadcrumb: 'Banners',\r\n    }),\r\n];\r\n"],"x_google_ignoreList":[]}